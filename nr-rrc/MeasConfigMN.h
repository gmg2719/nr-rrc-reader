/*
 * Generated by asn1c-0.9.29 (http://lionet.info/asn1c)
 * From ASN.1 module "NR-InterNodeDefinitions"
 * 	found in "38331-f60.asn"
 * 	`asn1c -no-gen-example -fcompound-names -findirect-choice -gen-PER -pdu=all -fincludes-quoted -funnamed-unions -D nr-rrc`
 */

#ifndef	_MeasConfigMN_H_
#define	_MeasConfigMN_H_


#include "asn_application.h"

/* Including external dependencies */
#include "NativeEnumerated.h"
#include "asn_SEQUENCE_OF.h"
#include "constr_SEQUENCE_OF.h"
#include "constr_SEQUENCE.h"

#ifdef __cplusplus
extern "C" {
#endif

/* Dependencies */
typedef enum MeasConfigMN__gapPurpose {
	MeasConfigMN__gapPurpose_perUE	= 0,
	MeasConfigMN__gapPurpose_perFR1	= 1
} e_MeasConfigMN__gapPurpose;

/* Forward declarations */
struct SetupRelease_GapConfig;
struct NR_FreqInfo;

/* MeasConfigMN */
typedef struct MeasConfigMN {
	struct MeasConfigMN__measuredFrequenciesMN {
		A_SEQUENCE_OF(struct NR_FreqInfo) list;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *measuredFrequenciesMN;
	struct SetupRelease_GapConfig	*measGapConfig;	/* OPTIONAL */
	long	*gapPurpose;	/* OPTIONAL */
	/*
	 * This type is extensible,
	 * possible extensions are below.
	 */
	struct MeasConfigMN__ext1 {
		struct SetupRelease_GapConfig	*measGapConfigFR2;	/* OPTIONAL */
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *ext1;
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} MeasConfigMN_t;

/* Implementation */
/* extern asn_TYPE_descriptor_t asn_DEF_gapPurpose_5;	// (Use -fall-defs-global to expose) */
extern asn_TYPE_descriptor_t asn_DEF_MeasConfigMN;
extern asn_SEQUENCE_specifics_t asn_SPC_MeasConfigMN_specs_1;
extern asn_TYPE_member_t asn_MBR_MeasConfigMN_1[4];

#ifdef __cplusplus
}
#endif

/* Referred external types */
#include "SetupRelease.h"
#include "NR-FreqInfo.h"

#endif	/* _MeasConfigMN_H_ */
#include "asn_internal.h"
